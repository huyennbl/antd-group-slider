{"version":3,"sources":["../../src/GroupSliderLine.js","../../src/GroupSlider.js","App.js","index.js"],"names":["GroupSliderLine","state","right","left","onChange","val","nextRight","Math","calculateMarks","mid","max","0","renderDescription","placeholder","descriptionType","placeholderDesc","placeholderSeparator","inputProps","className","defaultValue","e","renderPlaceholderText","input","rangeSeparator","render","this","marks","props","range","min","value","onAfterChange","React","Component","useState","ranges","setRanges","descriptions","setDescriptions","useEffect","removeText","addText","onAfterRangeChange","index","currentRight","rightNeighbor","syncRange","data","updateDescription","description","nextDescriptions","initialDescription","key","gutter","span","disabled","lastIndex","isAbleToAddRange","ghost","type","onClick","newRanges","danger","App","style","display","width","justifyContent","separator","addButtonText","console","log","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fe9a745a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Input, Slider } from 'antd'\r\nimport './styles.css'\r\nconst DEFAULT_PLACEHOLDER = 'Description for range {{range}}'\r\nclass GroupSliderLine extends React.Component {\r\n  state = {\r\n    right: this.props.value[1],\r\n    left: this.props.value[0]\r\n  }\r\n  onChange = (val) => {\r\n    const [left, right] = val\r\n    const nextRight = left === this.state.left ? right : left\r\n    this.setState({\r\n      right: Math.max(this.state.left, nextRight)\r\n    })\r\n  }\r\n  calculateMarks = (max) => {\r\n    const mid = Math.floor(max / 2)\r\n    return {\r\n      0: '0',\r\n      [mid]: mid.toString(),\r\n      [max]: max.toString()\r\n    }\r\n  }\r\n  renderDescription = () => {\r\n    const { placeholder, descriptionType } = this.props\r\n    const placeholderDesc = placeholder && placeholder.description\r\n    const placeholderSeparator = placeholder && placeholder.separator\r\n    const inputProps = {\r\n      className: 'antd-group-slider-item__description',\r\n      placeholder: this.renderPlaceholderText(\r\n        placeholderDesc,\r\n        placeholderSeparator\r\n      ),\r\n      defaultValue: this.props.initialDescription,\r\n      onChange: (e) => this.props.updateDescription(e.target.value)\r\n    }\r\n    if (descriptionType === 'none') {\r\n      return <React.Fragment />\r\n    }\r\n    if (descriptionType === 'input') {\r\n      return <Input {...inputProps} />\r\n    }\r\n    return <Input.TextArea {...inputProps} />\r\n  }\r\n\r\n  renderPlaceholderText = (\r\n    input = DEFAULT_PLACEHOLDER,\r\n    rangeSeparator = '-'\r\n  ) => {\r\n    return input.replace(\r\n      /{{range}}/,\r\n      `${this.state.left}${rangeSeparator}${this.state.right}`\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { left, right } = this.state\r\n    const marks = this.props.marks || this.calculateMarks(this.props.max)\r\n\r\n    return (\r\n      <div className='antd-group-slider-item'>\r\n        <Slider\r\n          className='antd-group-slider-item__slider'\r\n          range\r\n          min={0}\r\n          max={this.props.max}\r\n          marks={marks}\r\n          value={[left, right]}\r\n          onChange={this.onChange}\r\n          onAfterChange={(val) => this.props.onAfterRangeChange(val)}\r\n        />\r\n        {this.renderDescription()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default GroupSliderLine\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Button, Col, Row } from 'antd'\r\nimport GroupSliderLine from './GroupSliderLine'\r\nimport './styles.css'\r\nconst DEFAULT_LEFT = 0\r\nconst DEFAULT_RIGHT = 100\r\n\r\nconst GroupSlider = ({ min = DEFAULT_LEFT, max = DEFAULT_RIGHT, ...props }) => {\r\n  const [ranges, setRanges] = useState([[min, max]])\r\n  const [descriptions, setDescriptions] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (props.onChange) {\r\n      props.onChange({ ranges, descriptions })\r\n    }\r\n  }, [ranges, descriptions])\r\n\r\n  const addRange = () => {\r\n    const newRanges = [...ranges]\r\n    const lastIndex = ranges.length - 1\r\n    const left = ranges[lastIndex][1]\r\n    newRanges.push([left + 1, max])\r\n    setRanges(newRanges)\r\n  }\r\n\r\n  const syncRange = (range, index) => {\r\n    let currentRight = range[1]\r\n    const rightNeighbor = ranges[index + 1]\r\n    if (rightNeighbor) {\r\n      const nextRight = rightNeighbor[1]\r\n      if (currentRight >= nextRight - 1) {\r\n        currentRight = nextRight - 2\r\n        rightNeighbor[0] = rightNeighbor[1] - 1\r\n      } else {\r\n        rightNeighbor[0] = currentRight + 1\r\n      }\r\n    }\r\n    ranges[index][1] = currentRight\r\n    setRanges([...ranges])\r\n  }\r\n\r\n  const updateDescription = (description, index) => {\r\n    const nextDescriptions = [...descriptions]\r\n    nextDescriptions[index] = description\r\n    setDescriptions(nextDescriptions)\r\n  }\r\n\r\n  const renderPointRangeGroupLine = () => {\r\n    return ranges.map((range, i) => {\r\n      return (\r\n        <GroupSliderLine\r\n          marks={props.marks}\r\n          placeholder={props.placeholder}\r\n          descriptionType={props.descriptionType}\r\n          onAfterRangeChange={(data) => syncRange(data, i)}\r\n          updateDescription={(data) => updateDescription(data, i)}\r\n          initialDescription={descriptions[i]}\r\n          value={range}\r\n          key={range}\r\n          max={max}\r\n        />\r\n      )\r\n    })\r\n  }\r\n\r\n  const isAbleToAddRange = () => {\r\n    const lastIndex = ranges.length - 1\r\n    return ranges[lastIndex][1] > max - 2\r\n  }\r\n\r\n  const cannotRemoveRange = () => {\r\n    return ranges.length <= 1\r\n  }\r\n\r\n  const removeLastRange = () => {\r\n    ranges.pop()\r\n    const lastIndex = ranges.length - 1\r\n    ranges[lastIndex][1] = max\r\n    setRanges([...ranges])\r\n    descriptions.pop()\r\n    setDescriptions([...descriptions])\r\n  }\r\n\r\n  const removeText = props.removeButtonText || 'Remove last range'\r\n  const addText = props.addButtonText || 'Add more range'\r\n  return (\r\n    <div className='antd-group-slider'>\r\n      {renderPointRangeGroupLine()}\r\n      <Row className='antd-group-slider__footer' gutter={4}>\r\n        <Col span={12}>\r\n          <Button\r\n            className='antd-group-slider__btn-add-range'\r\n            disabled={isAbleToAddRange()}\r\n            ghost\r\n            type='primary'\r\n            onClick={addRange}\r\n          >\r\n            {addText}\r\n          </Button>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Button\r\n            className='antd-group-slider__btn-remove-range'\r\n            danger\r\n            disabled={cannotRemoveRange()}\r\n            onClick={removeLastRange}\r\n          >\r\n            {removeText}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GroupSlider\r\n","import React from 'react'\n\nimport GroupSlider from 'antd-group-slider'\nimport 'antd-group-slider/dist/index.css'\n\nconst App = () => {\n  return (\n    <div style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n      <div style={{ width: '50vw' }}>\n        <GroupSlider\n          placeholder={{\n            description: 'input value of range {{range}}',\n            separator: ' to '\n          }}\n          max='42'\n          addButtonText='Custom add text'\n          onChange={(data) => {\n            console.log(data)\n          }}\n          descriptionType='input'\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}