{"version":3,"sources":["../../src/utils.js","../../src/GroupSliderLine.js","../../src/rangeUtils.js","../../src/GroupSlider.js","App.js","index.js"],"names":["renderRangeInText","text","separator","range","left","right","SideTextDescription","leftText","rightText","children","className","GroupSliderLine","state","onChange","val","nextRight","Math","calculateMarks","mid","max","0","renderDescription","descriptionConfig","placeholder","type","leftAddonText","rightAddonText","inputProps","defaultValue","e","inputPropsWithAddon","Object","addonBefore","addonAfter","render","this","marks","props","min","value","onAfterChange","React","Component","fillGaps","data","config","descriptions","inputRanges","inputDescriptions","ranges","rightIndex","leftIndex","enoughForNewRange","missingRange","calculateMissingRange","fillMissingGaps","standardizeRanges","TooltipAddButton","trigger","placement","title","useState","setRanges","setDescriptions","useEffect","processedInitialValues","isFullRange","values","r","i","parseInt","removeText","addText","addButton","disabled","lastIndex","isAbleToAddRange","ghost","onClick","newRanges","key","onAfterRangeChange","updatedRange","index","nextRanges","currentRight","rightNeighbor","syncRanges","syncNewRange","updateDescription","description","nextDescriptions","initialDescription","gutter","span","danger","App","style","display","width","justifyContent","flexDirection","alignItems","src","alt","href","target","rel","initialValues","initialValuesConfig","addButtonText","removeButtonText","showDivider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0a52f517.chunk.js","sourcesContent":["const DEFAULT_SEPARATOR = '-'\r\nexport function renderRangeInText(\r\n  range,\r\n  text = '',\r\n  separator = DEFAULT_SEPARATOR\r\n) {\r\n  if (!range || range.length !== 2) {\r\n    return text\r\n  }\r\n  const left = range[0]\r\n  const right = range[1]\r\n  return text.replace(/{{range}}/, `${left}${separator}${right}`)\r\n}\r\n","import React from 'react'\r\nimport { Input, Slider } from 'antd'\r\nimport { renderRangeInText } from './utils'\r\nimport './styles.css'\r\n\r\nconst DEFAULT_PLACEHOLDER = 'Description for range {{range}}'\r\n\r\nconst SideTextDescription = ({ leftText, rightText, children }) => {\r\n  return (\r\n    <div className='antd-group-slider-item__description'>\r\n      <div className='antd-group-slider-item__description-left-text'>\r\n        {leftText}\r\n      </div>\r\n\r\n      {children}\r\n\r\n      <div className='antd-group-slider-item__description-right-text'>\r\n        {rightText}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass GroupSliderLine extends React.Component {\r\n  state = {\r\n    right: this.props.value[1],\r\n    left: this.props.value[0]\r\n  }\r\n  onChange = (val) => {\r\n    const [left, right] = val\r\n    const nextRight = left === this.state.left ? right : left\r\n    this.setState({\r\n      right: Math.max(this.state.left, nextRight)\r\n    })\r\n  }\r\n  calculateMarks = (max) => {\r\n    const mid = Math.floor(max / 2)\r\n    return {\r\n      0: '0',\r\n      [mid]: mid.toString(),\r\n      [max]: max.toString()\r\n    }\r\n  }\r\n  renderDescription = () => {\r\n    const descriptionConfig = this.props.descriptionConfig || {}\r\n    const {\r\n      placeholder,\r\n      type,\r\n      separator,\r\n      leftText,\r\n      leftAddonText,\r\n      rightText,\r\n      rightAddonText\r\n    } = descriptionConfig\r\n    if (type === 'none') {\r\n      return <React.Fragment />\r\n    }\r\n\r\n    const range = [this.state.left, this.state.right]\r\n    const inputProps = {\r\n      className: 'antd-group-slider-item__description',\r\n      placeholder: placeholder\r\n        ? renderRangeInText(range, placeholder, separator)\r\n        : renderRangeInText(range, DEFAULT_PLACEHOLDER, separator),\r\n      defaultValue: this.props.initialDescription,\r\n      onChange: (e) => this.props.updateDescription(e.target.value)\r\n    }\r\n\r\n    if (type === 'input') {\r\n      const inputPropsWithAddon = Object.assign({}, inputProps, {\r\n        addonBefore: renderRangeInText(range, leftAddonText, separator),\r\n        addonAfter: renderRangeInText(range, rightAddonText, separator)\r\n      })\r\n      return (\r\n        <SideTextDescription\r\n          range={range}\r\n          leftText={renderRangeInText(range, leftText, separator)}\r\n          rightText={renderRangeInText(range, rightText, separator)}\r\n        >\r\n          <Input {...inputPropsWithAddon} />\r\n        </SideTextDescription>\r\n      )\r\n    }\r\n    return (\r\n      <SideTextDescription\r\n        range={range}\r\n        leftText={renderRangeInText(range, leftText, separator)}\r\n        rightText={renderRangeInText(range, rightText, separator)}\r\n      >\r\n        <Input.TextArea {...inputProps} />\r\n      </SideTextDescription>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { left, right } = this.state\r\n    const marks = this.props.marks || this.calculateMarks(this.props.max)\r\n\r\n    return (\r\n      <div className='antd-group-slider-item'>\r\n        <Slider\r\n          className='antd-group-slider-item__slider'\r\n          range\r\n          min={0}\r\n          max={this.props.max}\r\n          marks={marks}\r\n          value={[left, right]}\r\n          onChange={this.onChange}\r\n          onAfterChange={(val) => {\r\n            this.props.onAfterRangeChange(val)\r\n            this.setState({\r\n              right: this.props.value[1],\r\n              left: this.props.value[0]\r\n            })\r\n          }}\r\n        />\r\n        {this.renderDescription()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default GroupSliderLine\r\n","export function syncRanges(inputRanges, range, index) {\r\n  let ranges = [...inputRanges]\r\n  let currentRight = range[1]\r\n  const rightNeighbor = ranges[index + 1]\r\n  if (rightNeighbor) {\r\n    const nextRight = rightNeighbor[1]\r\n    if (currentRight >= nextRight - 1) {\r\n      currentRight = nextRight - 1\r\n      rightNeighbor[0] = rightNeighbor[1]\r\n    } else {\r\n      rightNeighbor[0] = currentRight + 1\r\n    }\r\n  }\r\n  ranges[index][1] = currentRight\r\n  return ranges\r\n}\r\n\r\nexport function fillGaps(data, config = { fillGaps: true }) {\r\n  if (!config.fillGaps) return data\r\n  if (data.ranges && data.ranges.length < 2) return data\r\n  const { descriptions } = data\r\n  let ranges = standardizeRanges(data.ranges)\r\n  let output = fillMissingGaps(ranges, descriptions)\r\n  return output\r\n}\r\n\r\nfunction standardizeRanges(ranges) {\r\n  // return a new array that\r\n  // 1 - ensure left value of each range is always <= right value\r\n  // 2 - sort ranges by left values of each range\r\n\r\n  return ranges.map((range) => {\r\n    const left = Math.min(...range)\r\n    const right = Math.max(...range)\r\n    return [left, right]\r\n  })\r\n}\r\n\r\nfunction enoughForNewRange(ranges, leftIndex, rightIndex) {\r\n  return ranges[rightIndex][0] - ranges[leftIndex][1] > 1\r\n}\r\n\r\nfunction fillMissingGaps(inputRanges, inputDescriptions) {\r\n  let ranges = [...inputRanges]\r\n  let descriptions = [...inputDescriptions]\r\n  for (let rightIndex = ranges.length - 1; rightIndex > 0; rightIndex--) {\r\n    const leftIndex = rightIndex - 1\r\n    if (enoughForNewRange(ranges, leftIndex, rightIndex)) {\r\n      const missingRange = calculateMissingRange(ranges, leftIndex, rightIndex)\r\n      ranges.splice(rightIndex, 0, missingRange)\r\n      descriptions.splice(rightIndex, 0, '')\r\n    }\r\n  }\r\n  return { ranges, descriptions }\r\n}\r\n\r\nfunction calculateMissingRange(ranges, leftIndex, rightIndex) {\r\n  const left = ranges[leftIndex][1] + 1\r\n  const right = ranges[rightIndex][0] - 1\r\n  return [left, right]\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Button, Divider, Col, Row, Tooltip } from 'antd'\r\nimport GroupSliderLine from './GroupSliderLine'\r\nimport { fillGaps, syncRanges } from './rangeUtils'\r\nimport './styles.css'\r\nconst DEFAULT_LEFT = 0\r\nconst DEFAULT_RIGHT = 100\r\n\r\nconst TooltipAddButton = ({ children }) => {\r\n  return (\r\n    <Tooltip\r\n      trigger='hover'\r\n      placement='top'\r\n      title='Only can add range if the point range is not fully covered'\r\n    >\r\n      {children}\r\n    </Tooltip>\r\n  )\r\n}\r\n\r\nconst GroupSlider = ({ min = DEFAULT_LEFT, max = DEFAULT_RIGHT, ...props }) => {\r\n  const [ranges, setRanges] = useState([[min, max]])\r\n  const [descriptions, setDescriptions] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (props.initialValues) {\r\n      const processedInitialValues = fillGaps(\r\n        props.initialValues,\r\n        props.initialValuesConfig\r\n      )\r\n      const { ranges, descriptions } = processedInitialValues\r\n      setRanges(ranges)\r\n      setDescriptions(descriptions)\r\n    }\r\n  }, [])\r\n\r\n  const isFullRange = () => {\r\n    const values = new Set()\r\n    ranges.forEach((r) => {\r\n      const [left, right] = r\r\n      for (let i = left; i <= right; i++) {\r\n        if (i >= 0 && i <= 100) values.add(i)\r\n      }\r\n    })\r\n    return values.size === parseInt(max) + 1\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.onChange) {\r\n      props.onChange({ ranges, descriptions, isFullRange: isFullRange() })\r\n    }\r\n  }, [ranges, descriptions])\r\n\r\n  const addRange = () => {\r\n    const newRanges = [...ranges]\r\n    const lastIndex = ranges.length - 1\r\n    const left = ranges[lastIndex][1]\r\n    newRanges.push([left + 1, max])\r\n    setRanges(newRanges)\r\n  }\r\n\r\n  const syncNewRange = (updatedRange, index) => {\r\n    const nextRanges = syncRanges(ranges, updatedRange, index)\r\n    setRanges(nextRanges)\r\n  }\r\n\r\n  const updateDescription = (description, index) => {\r\n    const nextDescriptions = [...descriptions]\r\n    nextDescriptions[index] = description\r\n    setDescriptions(nextDescriptions)\r\n  }\r\n\r\n  const renderPointRangeGroupLine = () => {\r\n    return ranges.map((range, i) => {\r\n      return (\r\n        <React.Fragment key={range}>\r\n          <GroupSliderLine\r\n            marks={props.marks}\r\n            descriptionConfig={props.descriptionConfig}\r\n            onAfterRangeChange={(data) => syncNewRange(data, i)}\r\n            updateDescription={(data) => updateDescription(data, i)}\r\n            initialDescription={descriptions[i]}\r\n            value={range}\r\n            max={max}\r\n          />\r\n          {props.showDivider ? <Divider /> : <React.Fragment />}\r\n        </React.Fragment>\r\n      )\r\n    })\r\n  }\r\n\r\n  const isAbleToAddRange = () => {\r\n    const lastIndex = ranges.length - 1\r\n    return ranges[lastIndex][1] > max - 2\r\n  }\r\n\r\n  const cannotRemoveRange = () => {\r\n    return ranges.length <= 1\r\n  }\r\n\r\n  const removeLastRange = () => {\r\n    ranges.pop()\r\n    const lastIndex = ranges.length - 1\r\n    ranges[lastIndex][1] = max\r\n    setRanges([...ranges])\r\n    descriptions.pop()\r\n    setDescriptions([...descriptions])\r\n  }\r\n\r\n  const removeText = props.removeButtonText || 'Remove last range'\r\n  const addText = props.addButtonText || 'Add more range'\r\n  const addButton = (\r\n    <Button\r\n      className='antd-group-slider__btn-add-range'\r\n      disabled={isAbleToAddRange()}\r\n      ghost\r\n      type='primary'\r\n      onClick={addRange}\r\n    >\r\n      {addText}\r\n    </Button>\r\n  )\r\n  return (\r\n    <div className='antd-group-slider'>\r\n      {renderPointRangeGroupLine()}\r\n      <Row className='antd-group-slider__footer' gutter={4}>\r\n        <Col span={12}>\r\n          {isFullRange() ? (\r\n            <TooltipAddButton>{addButton}</TooltipAddButton>\r\n          ) : (\r\n            addButton\r\n          )}\r\n        </Col>\r\n        <Col span={12}>\r\n          <Button\r\n            className='antd-group-slider__btn-remove-range'\r\n            danger\r\n            disabled={cannotRemoveRange()}\r\n            onClick={removeLastRange}\r\n          >\r\n            {removeText}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GroupSlider\r\n","import React from 'react'\r\nimport GroupSlider from 'antd-group-slider'\r\nimport 'antd-group-slider/dist/index.css'\r\nimport 'antd/dist/antd.css'\r\nconst App = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n      }}\r\n    >\r\n      <div className='header'>\r\n        <div className='header__title'>antd-group-slider</div>\r\n        <img className='header__logo' src='./favicon.png' alt='logo' />\r\n      </div>\r\n\r\n      <h3>\r\n        NPM:{' '}\r\n        <a\r\n          href='https://www.npmjs.com/package/antd-group-slider'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          https://www.npmjs.com/package/antd-group-slider\r\n        </a>\r\n      </h3>\r\n      <h3>\r\n        GitHub:{' '}\r\n        <a\r\n          href='https://github.com/huyennbl/antd-group-slider'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          https://github.com/huyennbl/antd-group-slider\r\n        </a>\r\n      </h3>\r\n      <p className='intro'>\r\n        <strong>antd-group-slider</strong> provides a group of sliders that help\r\n        input data with multiple ranges & description. It has data sync between\r\n        sliders that will automatically fill the missing gap, hence improve UX,\r\n        which help the user to avoid accidental missing range during inputting\r\n        data.\r\n      </p>\r\n      <p className='note'>\r\n        Please first have a look at{' '}\r\n        <a\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n          href='https://ant.design/components/slider/'\r\n        >\r\n          Ant Slider\r\n        </a>{' '}\r\n        to have a general idea of the use case of this component.\r\n      </p>\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{'<GroupSlider />'}</pre>\r\n        </div>\r\n        <GroupSlider />\r\n      </div>\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{`<GroupSlider \r\n  initialValues={{\r\n    ranges: [\r\n      [0, 25],\r\n      [50, 100]\r\n    ],\r\n    descriptions: ['First', 'Third']\r\n  }}\r\n/>`}</pre>\r\n        </div>\r\n        <GroupSlider\r\n          initialValues={{\r\n            ranges: [\r\n              [0, 25],\r\n              [50, 100]\r\n            ],\r\n            descriptions: ['First', 'Third']\r\n          }}\r\n        />\r\n      </div>\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{`<GroupSlider \r\n  initialValues={{\r\n    ranges: [\r\n      [0, 25],\r\n      [50, 100]\r\n    ],\r\n    descriptions: ['First', 'Third']\r\n  }}\r\n  initialValuesConfig={{\r\n    fillGaps: false\r\n  }}\r\n/>`}</pre>\r\n        </div>\r\n        <GroupSlider\r\n          initialValues={{\r\n            ranges: [\r\n              [0, 25],\r\n              [50, 100]\r\n            ],\r\n            descriptions: ['First', 'Second']\r\n          }}\r\n          initialValuesConfig={{\r\n            fillGaps: false\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{`<GroupSlider\r\n  max={500}\r\n  addButtonText='More range'\r\n  removeButtonText='Remove last'\r\n/>`}</pre>\r\n        </div>\r\n        <GroupSlider\r\n          max={500}\r\n          addButtonText='More range'\r\n          removeButtonText='Remove last'\r\n        />\r\n      </div>\r\n\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{`<GroupSlider\r\n  descriptionConfig={{\r\n    placeholder: 'Waiting for description of range {{range}}',\r\n    leftText: 'Description of {{range}}: '\r\n  }}\r\n/>`}</pre>\r\n        </div>\r\n        <GroupSlider\r\n          descriptionConfig={{\r\n            placeholder: 'Waiting for description of range {{range}}',\r\n            leftText: 'Description of {{range}}: '\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{`<GroupSlider\r\n  descriptionConfig={{\r\n    leftAddonText: 'Description of {{range}}: ', // addonText only works with type='input'\r\n    type: 'input'\r\n  }}\r\n/>`}</pre>\r\n        </div>\r\n        <GroupSlider\r\n          descriptionConfig={{\r\n            leftAddonText: 'Description of {{range}}: ', // addonText only works with type='input'\r\n            type: 'input'\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{`<GroupSlider\r\n  descriptionConfig={{\r\n    type: 'none'\r\n  }}\r\n/>`}</pre>\r\n        </div>\r\n        <GroupSlider\r\n          descriptionConfig={{\r\n            type: 'none'\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className='example'>\r\n        <div className='example__code'>\r\n          <pre>{`<GroupSlider showDivider />`}</pre>\r\n        </div>\r\n        <GroupSlider showDivider />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}