{"version":3,"sources":["../../src/utils.js","../../src/GroupSliderLine.js","../../src/GroupSlider.js","App.js","index.js"],"names":["renderRangeInText","text","separator","range","left","right","SideTextDescription","leftText","rightText","children","className","GroupSliderLine","state","onChange","val","nextRight","Math","calculateMarks","mid","max","0","renderDescription","descriptionConfig","placeholder","type","leftAddonText","rightAddonText","inputProps","defaultValue","e","inputPropsWithAddon","Object","addonBefore","addonAfter","render","this","marks","props","min","value","onAfterChange","React","Component","useState","ranges","setRanges","descriptions","setDescriptions","useEffect","removeText","addText","key","onAfterRangeChange","index","currentRight","rightNeighbor","syncRange","data","updateDescription","description","nextDescriptions","initialDescription","gutter","span","disabled","lastIndex","isAbleToAddRange","ghost","onClick","newRanges","danger","App","style","display","width","justifyContent","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fff97826.chunk.js","sourcesContent":["const DEFAULT_SEPARATOR = '-'\r\nexport function renderRangeInText(\r\n  range,\r\n  text = '',\r\n  separator = DEFAULT_SEPARATOR\r\n) {\r\n  if (!range || range.length !== 2) {\r\n    return text\r\n  }\r\n  const left = range[0]\r\n  const right = range[1]\r\n  return text.replace(/{{range}}/, `${left}${separator}${right}`)\r\n}\r\n","import React from 'react'\r\nimport { Input, Slider } from 'antd'\r\nimport { renderRangeInText } from './utils'\r\nimport './styles.css'\r\n\r\nconst DEFAULT_PLACEHOLDER = 'Description for range {{range}}'\r\n\r\nconst SideTextDescription = ({ leftText, rightText, children }) => {\r\n  return (\r\n    <div className='antd-group-slider-item__description'>\r\n      <div className='antd-group-slider-item__description-left-text'>\r\n        {leftText}\r\n      </div>\r\n\r\n      {children}\r\n\r\n      <div className='antd-group-slider-item__description-right-text'>\r\n        {rightText}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass GroupSliderLine extends React.Component {\r\n  state = {\r\n    right: this.props.value[1],\r\n    left: this.props.value[0]\r\n  }\r\n  onChange = (val) => {\r\n    const [left, right] = val\r\n    const nextRight = left === this.state.left ? right : left\r\n    this.setState({\r\n      right: Math.max(this.state.left, nextRight)\r\n    })\r\n  }\r\n  calculateMarks = (max) => {\r\n    const mid = Math.floor(max / 2)\r\n    return {\r\n      0: '0',\r\n      [mid]: mid.toString(),\r\n      [max]: max.toString()\r\n    }\r\n  }\r\n  renderDescription = () => {\r\n    const descriptionConfig = this.props.descriptionConfig || {}\r\n    const {\r\n      placeholder,\r\n      type,\r\n      separator,\r\n      leftText,\r\n      leftAddonText,\r\n      rightText,\r\n      rightAddonText\r\n    } = descriptionConfig\r\n    if (type === 'none') {\r\n      return <React.Fragment />\r\n    }\r\n\r\n    const range = [this.state.left, this.state.right]\r\n    const inputProps = {\r\n      className: 'antd-group-slider-item__description',\r\n      placeholder: placeholder\r\n        ? renderRangeInText(range, placeholder, separator)\r\n        : renderRangeInText(range, DEFAULT_PLACEHOLDER, separator),\r\n      defaultValue: this.props.initialDescription,\r\n      onChange: (e) => this.props.updateDescription(e.target.value)\r\n    }\r\n\r\n    if (type === 'input') {\r\n      const inputPropsWithAddon = Object.assign({}, inputProps, {\r\n        addonBefore: renderRangeInText(range, leftAddonText, separator),\r\n        addonAfter: renderRangeInText(range, rightAddonText, separator)\r\n      })\r\n      return (\r\n        <SideTextDescription\r\n          range={range}\r\n          leftText={renderRangeInText(range, leftText, separator)}\r\n          rightText={renderRangeInText(range, rightText, separator)}\r\n        >\r\n          <Input {...inputPropsWithAddon} />\r\n        </SideTextDescription>\r\n      )\r\n    }\r\n    return <Input.TextArea {...inputProps} />\r\n  }\r\n\r\n  render() {\r\n    const { left, right } = this.state\r\n    const marks = this.props.marks || this.calculateMarks(this.props.max)\r\n\r\n    return (\r\n      <div className='antd-group-slider-item'>\r\n        <Slider\r\n          className='antd-group-slider-item__slider'\r\n          range\r\n          min={0}\r\n          max={this.props.max}\r\n          marks={marks}\r\n          value={[left, right]}\r\n          onChange={this.onChange}\r\n          onAfterChange={(val) => this.props.onAfterRangeChange(val)}\r\n        />\r\n        {this.renderDescription()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default GroupSliderLine\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Button, Divider, Col, Row } from 'antd'\r\nimport GroupSliderLine from './GroupSliderLine'\r\nimport './styles.css'\r\nconst DEFAULT_LEFT = 0\r\nconst DEFAULT_RIGHT = 100\r\n\r\nconst GroupSlider = ({ min = DEFAULT_LEFT, max = DEFAULT_RIGHT, ...props }) => {\r\n  const [ranges, setRanges] = useState([[min, max]])\r\n  const [descriptions, setDescriptions] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (props.initialValues) {\r\n      const { ranges, descriptions } = props.initialValues\r\n      setRanges(ranges)\r\n      setDescriptions(descriptions)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (props.onChange) {\r\n      props.onChange({ ranges, descriptions })\r\n    }\r\n  }, [ranges, descriptions])\r\n\r\n  const addRange = () => {\r\n    const newRanges = [...ranges]\r\n    const lastIndex = ranges.length - 1\r\n    const left = ranges[lastIndex][1]\r\n    newRanges.push([left + 1, max])\r\n    setRanges(newRanges)\r\n  }\r\n\r\n  const syncRange = (range, index) => {\r\n    let currentRight = range[1]\r\n    const rightNeighbor = ranges[index + 1]\r\n    if (rightNeighbor) {\r\n      const nextRight = rightNeighbor[1]\r\n      if (currentRight >= nextRight - 1) {\r\n        currentRight = nextRight - 2\r\n        rightNeighbor[0] = rightNeighbor[1] - 1\r\n      } else {\r\n        rightNeighbor[0] = currentRight + 1\r\n      }\r\n    }\r\n    ranges[index][1] = currentRight\r\n    setRanges([...ranges])\r\n  }\r\n\r\n  const updateDescription = (description, index) => {\r\n    const nextDescriptions = [...descriptions]\r\n    nextDescriptions[index] = description\r\n    setDescriptions(nextDescriptions)\r\n  }\r\n\r\n  const renderPointRangeGroupLine = () => {\r\n    return ranges.map((range, i) => {\r\n      return (\r\n        <React.Fragment key={range}>\r\n          <GroupSliderLine\r\n            marks={props.marks}\r\n            descriptionConfig={props.descriptionConfig}\r\n            onAfterRangeChange={(data) => syncRange(data, i)}\r\n            updateDescription={(data) => updateDescription(data, i)}\r\n            initialDescription={descriptions[i]}\r\n            value={range}\r\n            max={max}\r\n          />\r\n          {props.showDivider ? <Divider /> : <React.Fragment />}\r\n        </React.Fragment>\r\n      )\r\n    })\r\n  }\r\n\r\n  const isAbleToAddRange = () => {\r\n    const lastIndex = ranges.length - 1\r\n    return ranges[lastIndex][1] > max - 2\r\n  }\r\n\r\n  const cannotRemoveRange = () => {\r\n    return ranges.length <= 1\r\n  }\r\n\r\n  const removeLastRange = () => {\r\n    ranges.pop()\r\n    const lastIndex = ranges.length - 1\r\n    ranges[lastIndex][1] = max\r\n    setRanges([...ranges])\r\n    descriptions.pop()\r\n    setDescriptions([...descriptions])\r\n  }\r\n\r\n  const removeText = props.removeButtonText || 'Remove last range'\r\n  const addText = props.addButtonText || 'Add more range'\r\n  return (\r\n    <div className='antd-group-slider'>\r\n      {renderPointRangeGroupLine()}\r\n      <Row className='antd-group-slider__footer' gutter={4}>\r\n        <Col span={12}>\r\n          <Button\r\n            className='antd-group-slider__btn-add-range'\r\n            disabled={isAbleToAddRange()}\r\n            ghost\r\n            type='primary'\r\n            onClick={addRange}\r\n          >\r\n            {addText}\r\n          </Button>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Button\r\n            className='antd-group-slider__btn-remove-range'\r\n            danger\r\n            disabled={cannotRemoveRange()}\r\n            onClick={removeLastRange}\r\n          >\r\n            {removeText}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GroupSlider\r\n","import React from 'react'\r\nimport GroupSlider from 'antd-group-slider'\r\nimport 'antd-group-slider/dist/index.css'\r\nimport 'antd/dist/antd.css'\r\nconst App = () => {\r\n  return (\r\n    <div style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\r\n      <div style={{ width: '50vw' }}>\r\n        <GroupSlider />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}